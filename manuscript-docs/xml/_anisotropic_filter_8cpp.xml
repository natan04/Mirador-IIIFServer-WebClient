<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_anisotropic_filter_8cpp" kind="file">
    <compoundname>AnisotropicFilter.cpp</compoundname>
    <includes refid="stdafx_8h" local="yes">stdafx.h</includes>
    <includes refid="_anisotropic_filter_8h" local="yes">AnisotropicFilter.h</includes>
    <includes refid="anigauss_8h" local="yes">anigauss.h</includes>
    <includes refid="_binary_component_extractor_8h" local="yes">BinaryComponentExtractor.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="23">
        <label>opencv/cv.h</label>
      </node>
      <node id="34">
        <label>BinaryComponentExtractor.h</label>
        <link refid="_binary_component_extractor_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ConnectedComponent.h</label>
        <link refid="_connected_component_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>SDKDDKVer.h</label>
      </node>
      <node id="5">
        <label>ManuscriptApp/AnisotropicFilter.cpp</label>
        <link refid="AnisotropicFilter.cpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="20">
        <label>ImageConverter.h</label>
        <link refid="_image_converter_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>string</label>
      </node>
      <node id="22">
        <label>ComponentExtractor.h</label>
        <link refid="_component_extractor_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Contour.h</label>
        <link refid="_contour_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>opencv\cv.h</label>
      </node>
      <node id="19">
        <label>ImageEnhancer.h</label>
        <link refid="_image_enhancer_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>AnisotropicFilter.h</label>
        <link refid="_anisotropic_filter_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdafx.h</label>
        <link refid="stdafx_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Feature.h</label>
        <link refid="_feature_8h"/>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="29">
        <label>FeatureExtractor.h</label>
        <link refid="_feature_extractor_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ImageProjector.h</label>
        <link refid="_image_projector_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>math.h</label>
      </node>
      <node id="14">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="12">
        <label>DImage.h</label>
        <link refid="_d_image_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>tchar.h</label>
      </node>
      <node id="16">
        <label>ImageFilter.h</label>
        <link refid="_image_filter_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>anigauss.h</label>
        <link refid="anigauss_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>targetver.h</label>
        <link refid="targetver_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>imageoperator.h</label>
        <link refid="_image_operator_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>opencv2\core\core.hpp</label>
      </node>
      <node id="18">
        <label>ImageBinarizer.h</label>
        <link refid="_image_binarizer_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdafx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_anisotropic_filter_8h" kindref="compound">AnisotropicFilter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="anigauss_8h" kindref="compound">anigauss.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_binary_component_extractor_8h" kindref="compound">BinaryComponentExtractor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="class_anisotropic_filter_1ae47e28a13ee052b05d173cf6abd9975c" kindref="member">AnisotropicFilter::AnisotropicFilter</ref>()<sp/>{<sp/>;<sp/>}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>The<sp/>main<sp/>function<sp/>that<sp/>applies<sp/>the<sp/>Anisortropic<sp/>Filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//Returns:<sp/>Pointer<sp/>to<sp/>a<sp/>DImage<sp/>holding<sp/>the<sp/>output<sp/>of<sp/>the<sp/>Anisotropic<sp/>Filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/><ref refid="class_anisotropic_filter_1addbceed7b786a575f553bd4a41e0987c" kindref="member">AnisotropicFilter::filter</ref>(){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>M<sp/>=<sp/>findMaxResponse();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>=<sp/>eraseMargins(M);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>res<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_d_image" kindref="compound">DImage</ref>(M);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//=============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>This<sp/>function<sp/>erases<sp/>the<sp/>margins<sp/>of<sp/>a<sp/>given<sp/>Mat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//Param:<sp/>Mat<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//Returns:<sp/>Mat<sp/>instance<sp/>without<sp/>the<sp/>margins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//=============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">Mat<sp/>AnisotropicFilter::eraseMargins(Mat<sp/>im){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>img<sp/>=<sp/>im.clone();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>centralRow<sp/>=<sp/>std::floor((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)img.rows*0.1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>centralColumn<sp/>=<sp/>std::floor((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)img.cols*0.1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>res<sp/>=<sp/>img.rowRange(centralRow,<sp/>img.rows<sp/>-<sp/>centralRow);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>This<sp/>function<sp/>estimates<sp/>the<sp/>avg<sp/>word<sp/>size.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return:<sp/>a<sp/>vector&lt;int&gt;<sp/>instance<sp/>with<sp/>two<sp/>entries:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>scales[0]<sp/>=<sp/><sp/>lower<sp/>estimation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>scales[1]<sp/>=<sp/><sp/>upper<sp/>estimation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">vector&lt;double&gt;<sp/>AnisotropicFilter::lineSizeEstimation()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>img<sp/>=<sp/><ref refid="class_image_operator_1a096f8347c28e3c3e932d4bfe0fb33472" kindref="member">_image</ref>-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>().clone();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>img<sp/>=<sp/>eraseMargins(img);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>img.convertTo(img,<sp/>CV_8UC1);<sp/></highlight><highlight class="comment">//for<sp/>binarization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>threshold(img,<sp/>img,<sp/>0,<sp/>255,<sp/>CV_THRESH_OTSU);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ConnectedComponent*&gt;<sp/>components;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_binary_component_extractor" kindref="compound">BinaryComponentExtractor</ref><sp/>bn;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>bn.<ref refid="class_component_extractor_1a3ef66896076dc20816fd656b8aeb1f96" kindref="member">setImage</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_d_image" kindref="compound">DImage</ref>(img));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>bn.<ref refid="class_binary_component_extractor_1a16232815f3a3e8e28fd80a733ff71383" kindref="member">extract</ref>(components);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>RNG<sp/>rng(12345);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>avg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stdDev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)components.size();<sp/>i++){<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg<sp/>+=<sp/>components[i]-&gt;getBoundRect().height;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>avg<sp/>=<sp/>avg<sp/>/<sp/>(int)components.size();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)components.size();<sp/>i++){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdDev<sp/>+=<sp/>abs(components[i]-&gt;getBoundRect().height<sp/>-<sp/>avg);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectangle(img,<sp/>components[i]-&gt;getBoundRect(),<sp/>Scalar(rng.uniform(0,<sp/>255),<sp/>rng.uniform(0,<sp/>255),<sp/>rng.uniform(0,<sp/>255)),<sp/>2,<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>stdDev<sp/>=<sp/>sqrt(stdDev<sp/>/<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)components.size());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//namedWindow(&quot;comp&quot;,<sp/>WINDOW_NORMAL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//imshow(&quot;comp&quot;,<sp/>img);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>scales;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>scales.push_back(avg);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>scales.push_back(avg+stdDev);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scales;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//Description:Finds<sp/>the<sp/>Max<sp/>Response<sp/>of<sp/>a<sp/>filtered<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//Return:<sp/>Mat<sp/>instance<sp/>that<sp/>holds<sp/>the<sp/>max<sp/>response<sp/>at<sp/>each<sp/>pixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//===============================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">Mat<sp/>AnisotropicFilter::findMaxResponse(){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>M<sp/>=<sp/><ref refid="class_image_operator_1a096f8347c28e3c3e932d4bfe0fb33472" kindref="member">_image</ref>-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>().clone();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>M.convertTo(M,<sp/>CV_64FC1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>max_response(M.rows,<sp/>M.cols,<sp/>CV_64FC1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*I<sp/>=<sp/>M.ptr&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>scales<sp/>=<sp/>lineSizeEstimation();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//storing<sp/>all<sp/>the<sp/>responses<sp/>for<sp/>each<sp/>scale<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Mat&gt;<sp/>response_arr;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>scales[0];<sp/>i<sp/>&lt;<sp/>scales[1];<sp/>i++){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>response<sp/>=<sp/>applyFilter(I,<sp/>Size(M.cols,<sp/>M.rows),<sp/>theta,<sp/>i,<sp/>eta);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response_arr.push_back(response);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//finding<sp/>the<sp/>maximum<sp/>response<sp/>for<sp/>each<sp/>pixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>(int)M.rows;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>(int)M.cols;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_res<sp/>=<sp/>response_arr[0].at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(k,<sp/>m);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)response_arr.size();<sp/>j++){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response_arr[j].at&lt;double&gt;(k,<sp/>m)<sp/>&gt;<sp/>max_res)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_res<sp/>=<sp/>response_arr[j].at&lt;double&gt;(k,<sp/>m);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_response.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(k,<sp/>m)<sp/>=<sp/>max_res;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_response;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//==================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>Applys<sp/>Anisotropic<sp/>filter<sp/>to<sp/>a<sp/>given<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//Param:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//1.<sp/>double*I<sp/>-<sp/>input/output<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//2.<sp/>Size<sp/>sz<sp/>-<sp/>Size<sp/>of<sp/>input/output<sp/>Matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//3.<sp/>double<sp/>theta<sp/>-<sp/>the<sp/>for<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//4.<sp/>double<sp/>scale<sp/>-<sp/>scale<sp/>of<sp/>filter<sp/>(given<sp/>by<sp/>lineSizeEstimation()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//5.<sp/>double<sp/>eta<sp/>-<sp/>angle<sp/>for<sp/>the<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//Returns:<sp/>Mat<sp/>instance<sp/>-<sp/>the<sp/>output<sp/>of<sp/>the<sp/>Anistropic<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">Mat<sp/>AnisotropicFilter::applyFilter(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>I,<sp/>Size<sp/>sz,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="anigauss_8h_1ae97e45541e212872609d2ad24f0672b8" kindref="member">anigauss</ref>(I,<sp/>I,<sp/>sz.width,<sp/>sz.height,<sp/>scale,scale<sp/>*<sp/>3,<sp/>theta,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>res(sz.height,<sp/>sz.width,<sp/>CV_64FC1,<sp/>I);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/roykalony/Documents/workspace/manuscript-project/manuscriptvc/ManuscriptApp/AnisotropicFilter.cpp"/>
  </compounddef>
</doxygen>
