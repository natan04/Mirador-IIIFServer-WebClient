<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_projection_profile_8cpp" kind="file">
    <compoundname>ProjectionProfile.cpp</compoundname>
    <includes refid="stdafx_8h" local="yes">stdafx.h</includes>
    <includes refid="_projection_profile_8h" local="yes">ProjectionProfile.h</includes>
    <includes refid="_d_image_8h" local="yes">DImage.h</includes>
    <incdepgraph>
      <node id="1046">
        <label>opencv/cv.h</label>
      </node>
      <node id="1048">
        <label>ConnectedComponent.h</label>
        <link refid="_connected_component_8h"/>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
      </node>
      <node id="1029">
        <label>SDKDDKVer.h</label>
      </node>
      <node id="1047">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="1044">
        <label>ImageConverter.h</label>
        <link refid="_image_converter_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1038">
        <label>string</label>
      </node>
      <node id="1045">
        <label>ComponentExtractor.h</label>
        <link refid="_component_extractor_8h"/>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
      </node>
      <node id="1049">
        <label>Contour.h</label>
        <link refid="_contour_8h"/>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
      </node>
      <node id="1034">
        <label>opencv\cv.h</label>
      </node>
      <node id="1043">
        <label>ImageEnhancer.h</label>
        <link refid="_image_enhancer_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1027">
        <label>stdafx.h</label>
        <link refid="stdafx_8h"/>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
      </node>
      <node id="1052">
        <label>Feature.h</label>
        <link refid="_feature_8h"/>
      </node>
      <node id="1040">
        <label>vector</label>
      </node>
      <node id="1051">
        <label>FeatureExtractor.h</label>
        <link refid="_feature_extractor_8h"/>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1052" relation="include">
        </childnode>
      </node>
      <node id="1032">
        <label>ProjectionProfile.h</label>
        <link refid="_projection_profile_8h"/>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>ImageProjector.h</label>
        <link refid="_image_projector_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="1039">
        <label>DImage.h</label>
        <link refid="_d_image_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1051" relation="include">
        </childnode>
      </node>
      <node id="1036">
        <label>ImageTools.h</label>
        <link refid="_image_tools_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>tchar.h</label>
      </node>
      <node id="1026">
        <label>ManuscriptApp/ProjectionProfile.cpp</label>
        <link refid="ProjectionProfile.cpp"/>
        <childnode refid="1027" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1041">
        <label>ImageFilter.h</label>
        <link refid="_image_filter_8h"/>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1028">
        <label>targetver.h</label>
        <link refid="targetver_8h"/>
        <childnode refid="1029" relation="include">
        </childnode>
      </node>
      <node id="1030">
        <label>stdio.h</label>
      </node>
      <node id="1035">
        <label>ImageOperator.h</label>
        <link refid="_image_operator_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
      <node id="1050">
        <label>opencv2\core\core.hpp</label>
      </node>
      <node id="1042">
        <label>ImageBinarizer.h</label>
        <link refid="_image_binarizer_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdafx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_projection_profile_8h" kindref="compound">ProjectionProfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_d_image_8h" kindref="compound">DImage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecv" kindref="compound">cv</ref><sp/>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//===========================================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>This<sp/>function<sp/>preforms<sp/>two<sp/>key<sp/>transformation<sp/>on<sp/>the<sp/>given<sp/>sample:<sp/>first<sp/>it<sp/>rotates<sp/>the<sp/>sample<sp/>at<sp/>a<sp/>given<sp/>angle,<sp/>and<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>determines<sp/>which<sp/>type<sp/>of<sp/>reduction<sp/>to<sp/>preform<sp/>on<sp/>the<sp/>sample:<sp/>Sum,<sp/>Average,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>transformation<sp/>accepts<sp/>parameters<sp/>that<sp/>are<sp/>passed<sp/>through<sp/>the<sp/>Projection<sp/>Profile<sp/>constructor<sp/>(or<sp/>default<sp/>values.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/>A<sp/>DImage<sp/>instance<sp/>holding<sp/>the<sp/>image<sp/>projection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//============================================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/><ref refid="class_projection_profile_1a876b05a649f497584fe5d5632ffab9c0" kindref="member">ProjectionProfile::project</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>mat<sp/>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>org_mat<sp/>=<sp/>_image-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>()<sp/>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(_direction){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.create(org_mat.size(),<sp/>CV_8U);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_image-&gt;getMat().copyTo(mat);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>90<sp/>:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-90<sp/>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.create(org_mat.cols,<sp/>org_mat.rows,<sp/>CV_8U);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::transpose(_image-&gt;getMat(),<sp/>mat);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.create(org_mat.cols,<sp/>org_mat.rows,<sp/>CV_8U);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>rot_mat<sp/>=<sp/>cv::getRotationMatrix2D(cv::Point2f(org_mat.cols/2.0f,<sp/>org_mat.rows/2.0f),<sp/>_direction,<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warpAffine(org_mat,<sp/>mat,<sp/>rot_mat,<sp/>Size(org_mat.cols,<sp/>org_mat.rows))<sp/>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>proj_mat(mat.cols,<sp/>1,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>type<sp/>of<sp/>reduction<sp/>to<sp/>preform<sp/>on<sp/>the<sp/>document<sp/>:<sp/>Sum,<sp/>Average,<sp/>etc..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(_mode){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MODE_SUM:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::reduce(mat,<sp/>proj_mat,<sp/>1,<sp/>CV_REDUCE_SUM,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MODE_AVG:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::reduce(mat,<sp/>proj_mat,<sp/>1,<sp/>CV_REDUCE_AVG,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MODE_MAX:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::reduce(mat,<sp/>proj_mat,<sp/>1,<sp/>CV_REDUCE_MAX,<sp/>CV_32F);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MODE_MIN:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::reduce(mat,<sp/>proj_mat,<sp/>1,<sp/>CV_REDUCE_MIN);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::reduce(_image-&gt;getMat(),<sp/>proj_mat,<sp/>1,<sp/>CV_REDUCE_SUM);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_d_image" kindref="compound">DImage</ref>(proj_mat)<sp/>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_projection_profile_1a021b58fa03665d59cf6a21827a4c514c" kindref="member">ProjectionProfile::getProfileSum</ref>(<ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>profile){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>mat<sp/>=<sp/>profile-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>()<sp/>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>mat.rows<sp/>;<sp/>i++<sp/>){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,0)<sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_projection_profile_1a8bb3b2db0312483fc39ea60cb0067612" kindref="member">ProjectionProfile::drawProfile</ref>(<ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>img,<sp/><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>profile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>min,<sp/>max<sp/>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2i<sp/>start(0,0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2i<sp/>end(0,<sp/>img-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>().cols<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>prf<sp/>=<sp/>profile-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>()<sp/>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>mat<sp/><sp/>=<sp/>img-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>()<sp/>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>minMaxLoc(prf,<sp/>&amp;min,<sp/>&amp;max);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>norm<sp/>=<sp/>(float)(width/<sp/>max)<sp/>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>prf.rows<sp/>;<sp/>i++<sp/>){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start.x<sp/>=<sp/>mat.cols<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start.y<sp/>=<sp/>i<sp/>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end.x<sp/>=<sp/>mat.cols-1<sp/>-<sp/>(int)(norm<sp/>*<sp/>prf.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end.y<sp/>=<sp/>i<sp/>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line(mat,<sp/>start,<sp/>end,<sp/>0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//=======================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>This<sp/>function<sp/>populates<sp/>a<sp/>vector<sp/>to<sp/>hold<sp/>the<sp/>Peaks<sp/>and<sp/>Valleys<sp/>as<sp/>Pairs:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>first<sp/>coordinate<sp/>is<sp/>a<sp/>Point2i<sp/>holding<sp/>the<sp/>(x,y)<sp/>position<sp/>and<sp/>the<sp/>second<sp/>coordinate<sp/>holds<sp/>true<sp/>or<sp/>false<sp/>(True<sp/>=<sp/>Peak,<sp/>False<sp/>=<sp/>Valley).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//Returns:<sp/>A<sp/>vector<sp/>that<sp/>hold<sp/>the<sp/>Minimum<sp/>and<sp/>Maximum<sp/>points<sp/>on<sp/>the<sp/>projection<sp/>profile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//================================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">std::vector&lt;std::pair&lt;Point2i,<sp/>bool&gt;&gt;<sp/><ref refid="class_projection_profile_1ad3ee9dbf2b9a932fc5e2e591b1d9e693" kindref="member">ProjectionProfile::findMinimumMaximum</ref>(<ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DELTA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>mat<sp/>=<sp/>profile-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;Point2i,bool&gt;&gt;<sp/>array;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//END<sp/>CASES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0)<sp/>&gt;<sp/>DELTA)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(0,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)mat.at&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(0,0)),</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(1,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>&gt;<sp/>DELTA)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(0,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>mat.rows-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i<sp/>-<sp/>1,<sp/>0)<sp/>&gt;<sp/>DELTA<sp/>&amp;&amp;<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i<sp/>+<sp/>1,<sp/>0)<sp/>&gt;<sp/>DELTA)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(i,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i-1,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)&gt;DELTA<sp/>&amp;&amp;<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i+1,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)&gt;DELTA)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(i,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>0)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//END<sp/>CASES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>1,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>2,<sp/>0)<sp/>&gt;<sp/>DELTA)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(mat.rows-1,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>1,<sp/>0)),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>2,<sp/>0)<sp/>-<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>1,<sp/>0)<sp/>&gt;<sp/>DELTA)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.insert(array.end(),<sp/>std::make_pair(Point2i(mat.rows-1,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>mat.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(mat.rows<sp/>-<sp/>1,<sp/>0)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//=========================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>This<sp/>function<sp/>implements<sp/>the<sp/>Auto-Alignment<sp/>Algorithem<sp/>and<sp/>returns<sp/>a<sp/>double<sp/>to<sp/>represent<sp/>the<sp/>&quot;Weight&quot;<sp/>of<sp/>the<sp/>projection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//IMPORTANT:<sp/>The<sp/>number<sp/>of<sp/>peaks<sp/>is<sp/>corresponding<sp/>to<sp/>the<sp/>number<sp/>of<sp/>valleys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//=========================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_projection_profile_1ae7f19afd842e2989b7642d4de8f7f334" kindref="member">ProjectionProfile::getPeakValleySum</ref>(<ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;Point2i,bool&gt;&gt;<sp/>array<sp/>=<sp/>findMinimumMaximum(profile);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>(int)array.size()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[i].second<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>starts<sp/>by<sp/>looking<sp/>at<sp/>the<sp/>peaks.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[i<sp/>-<sp/>1].first.y<sp/>&lt;<sp/>array[i<sp/>+<sp/>1].first.y)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>array[i].first.y<sp/>-<sp/>array[i<sp/>+<sp/>1].first.y;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>array[i].first.y<sp/>-<sp/>array[i<sp/>-<sp/>1].first.y;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//END<sp/>CASES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)array.size()<sp/>-<sp/>1].second<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>array[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)array.size()<sp/>-<sp/>1].first.y<sp/>-<sp/>array[(int)array.size()<sp/>-<sp/>2].first.y;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[0].second<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>array[0].first.y<sp/>-<sp/>array[1].first.y;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>/<sp/>(int)array.size();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_projection_profile_1a558047469b18ba1fa1ae3ffd98e3c491" kindref="member">ProjectionProfile::getWeight</ref>(<ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>profile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scheme){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(scheme){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WS_SUM<sp/>:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getProfileSum(profile);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WS_PEAK_VALY_DIFF:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getPeakValleySum(profile);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break<sp/>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>;<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/roykalony/Documents/workspace/manuscript-project/manuscriptvc/ManuscriptApp/ProjectionProfile.cpp"/>
  </compounddef>
</doxygen>
