<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_profile_seam_text_line_extractor_8cpp" kind="file">
    <compoundname>ProfileSeamTextLineExtractor.cpp</compoundname>
    <includes refid="stdafx_8h" local="yes">stdafx.h</includes>
    <includes refid="_profile_seam_text_line_extractor_8h" local="yes">ProfileSeamTextLineExtractor.h</includes>
    <includes refid="_d_image_8h" local="yes">DImage.h</includes>
    <includes refid="_projection_profile_8h" local="yes">ProjectionProfile.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="977">
        <label>opencv/cv.h</label>
      </node>
      <node id="993">
        <label>ConnectedComponent.h</label>
        <link refid="_connected_component_8h"/>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="972">
        <label>SDKDDKVer.h</label>
      </node>
      <node id="978">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="991">
        <label>ImageConverter.h</label>
        <link refid="_image_converter_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="985">
        <label>string</label>
      </node>
      <node id="992">
        <label>ComponentExtractor.h</label>
        <link refid="_component_extractor_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
      </node>
      <node id="994">
        <label>Contour.h</label>
        <link refid="_contour_8h"/>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
      </node>
      <node id="981">
        <label>opencv\cv.h</label>
      </node>
      <node id="990">
        <label>ImageEnhancer.h</label>
        <link refid="_image_enhancer_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="970">
        <label>stdafx.h</label>
        <link refid="stdafx_8h"/>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="974" relation="include">
        </childnode>
      </node>
      <node id="997">
        <label>Feature.h</label>
        <link refid="_feature_8h"/>
      </node>
      <node id="976">
        <label>TextLineExtractor.h</label>
        <link refid="_text_line_extractor_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
      </node>
      <node id="975">
        <label>ProfileSeamTextLineExtractor.h</label>
        <link refid="_profile_seam_text_line_extractor_8h"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
      </node>
      <node id="987">
        <label>vector</label>
      </node>
      <node id="996">
        <label>FeatureExtractor.h</label>
        <link refid="_feature_extractor_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
      </node>
      <node id="979">
        <label>ProjectionProfile.h</label>
        <link refid="_projection_profile_8h"/>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>ImageProjector.h</label>
        <link refid="_image_projector_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="998">
        <label>math.h</label>
      </node>
      <node id="984">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="986">
        <label>DImage.h</label>
        <link refid="_d_image_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
      </node>
      <node id="983">
        <label>ImageTools.h</label>
        <link refid="_image_tools_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
      <node id="974">
        <label>tchar.h</label>
      </node>
      <node id="988">
        <label>ImageFilter.h</label>
        <link refid="_image_filter_8h"/>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="971">
        <label>targetver.h</label>
        <link refid="targetver_8h"/>
        <childnode refid="972" relation="include">
        </childnode>
      </node>
      <node id="969">
        <label>ManuscriptApp/ProfileSeamTextLineExtractor.cpp</label>
        <link refid="ProfileSeamTextLineExtractor.cpp"/>
        <childnode refid="970" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
      </node>
      <node id="973">
        <label>stdio.h</label>
      </node>
      <node id="982">
        <label>ImageOperator.h</label>
        <link refid="_image_operator_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
      </node>
      <node id="995">
        <label>opencv2\core\core.hpp</label>
      </node>
      <node id="989">
        <label>ImageBinarizer.h</label>
        <link refid="_image_binarizer_8h"/>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stdafx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_profile_seam_text_line_extractor_8h" kindref="compound">ProfileSeamTextLineExtractor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_d_image_8h" kindref="compound">DImage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_projection_profile_8h" kindref="compound">ProjectionProfile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="class_profile_seam_text_line_extractor_1ab20c9e4368b7f767e14dc96715bb6567" kindref="member">ProfileSeamTextLineExtractor::ProfileSeamTextLineExtractor</ref>(<ref refid="class_projection_profile" kindref="compound">ProjectionProfile</ref><sp/>proj,<sp/><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>prof,Mat<sp/>img)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref><sp/>=<sp/>img;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>_projector<sp/>=<sp/>proj;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>_profile<sp/>=<sp/>prof;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>This<sp/>function<sp/>splits<sp/>the<sp/>image<sp/>vertically<sp/>to<sp/>k<sp/>vertical<sp/>devisions<sp/>then<sp/>projects<sp/>each<sp/>seam<sp/>and<sp/>stores<sp/>it<sp/>in<sp/>an<sp/>array.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">std::vector&lt;DImage&gt;<sp/>ProfileSeamTextLineExtractor::createVerticalDevision(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>projectionMethod)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DImage&gt;<sp/>array;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>m<sp/>=<sp/><ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(int)(m.cols<sp/>/<sp/>k);<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_projection_profile" kindref="compound">ProjectionProfile</ref><sp/>proj(projectionMethod);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_image" kindref="compound">DImage</ref>*<sp/>col_img<sp/>=<sp/><ref refid="class_d_image" kindref="compound">DImage</ref>(m.colRange(i*w,<sp/>i*w<sp/>+<sp/>w)).project(proj);<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.push_back(*col_img);<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>This<sp/>function<sp/>is<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_profile_seam_text_line_extractor_1adf05463fd596d059da9669d3f8e43fed" kindref="member">ProfileSeamTextLineExtractor::MedialSeamDrawing</ref>(){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Extremum&gt;<sp/>arr<sp/>=<sp/>_projector.<ref refid="class_projection_profile_1ad3ee9dbf2b9a932fc5e2e591b1d9e693" kindref="member">findMinimumMaximum</ref>(_profile);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)arr.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[i].second<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2i<sp/>start(0,<sp/>arr[i].first.x);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2i<sp/>end(<ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref>.cols<sp/>-<sp/>1,<sp/>arr[i].first.x);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line(<ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref>,<sp/>start,<sp/>end,<sp/>0,<sp/>10);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>This<sp/>function<sp/>returns<sp/>a<sp/>derivative<sp/>Matrix<sp/>(using<sp/>Sobel<sp/>derivative)<sp/>of<sp/>the<sp/>given<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">Mat<sp/>ProfileSeamTextLineExtractor::computeDerivative(){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>img;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref>.copyTo(img);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>gradiant_mat;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ddepth<sp/>=<sp/>CV_16S;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>GaussianBlur(img,<sp/>img,<sp/>Size(11,<sp/>11),<sp/>0,<sp/>0,<sp/>BORDER_DEFAULT);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>grad_x,<sp/>grad_y;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>abs_grad_x,<sp/>abs_grad_y;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>Sobel(img,<sp/>grad_x,<sp/>ddepth,<sp/>1,<sp/>0,<sp/>11,<sp/>scale,<sp/>delta,<sp/>BORDER_DEFAULT);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>convertScaleAbs(grad_x,<sp/>abs_grad_x);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Sobel(img,<sp/>grad_y,<sp/>ddepth,<sp/>0,<sp/>1,<sp/>11,<sp/>scale,<sp/>delta,<sp/>BORDER_DEFAULT);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>convertScaleAbs(grad_y,<sp/>abs_grad_y);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>addWeighted(abs_grad_x,<sp/>0.5,<sp/>abs_grad_y,<sp/>0.5,<sp/>0,<sp/>gradiant_mat);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gradiant_mat;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/>This<sp/>function<sp/>computes<sp/>the<sp/>seperating<sp/>seams:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns:<sp/>vector<sp/>instance<sp/>-<sp/>a<sp/>vector<sp/>holding<sp/>each<sp/>sep<sp/>seams<sp/>row<sp/>along<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//==========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">vector&lt;vector&lt;int&gt;&gt;<sp/><ref refid="class_profile_seam_text_line_extractor_1a8221b34c948ac11481e2b8c8658ca4c6" kindref="member">ProfileSeamTextLineExtractor::computeSeperatingSeams</ref>(){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>energy_map;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Extremum&gt;<sp/>Lines;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Extremum&gt;<sp/>temp<sp/>=<sp/>_projector.<ref refid="class_projection_profile_1ad3ee9dbf2b9a932fc5e2e591b1d9e693" kindref="member">findMinimumMaximum</ref>(_profile);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;int&gt;&gt;<sp/>sep_seam_vector;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>transpose(computeDerivative(),energy_map);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>energy_map.rows;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)temp.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp[i].second<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lines.push_back(temp[i]);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>(int)Lines.size();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>l<sp/>-<sp/>1;<sp/>k++){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apply<sp/>constrained<sp/>seam<sp/>carving<sp/>for<sp/>each<sp/>pair<sp/>of<sp/>text<sp/>lines:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L_a<sp/>=<sp/>Lines[k].first.x;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L_b<sp/>=<sp/>Lines[k<sp/>+<sp/>1].first.x;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>1;<sp/>row<sp/>&lt;<sp/>n;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>L_a;<sp/>col<sp/>&lt;<sp/>L_b;<sp/>col++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Defining<sp/>the<sp/>bounderies<sp/>upon<sp/>which<sp/>to<sp/>find<sp/>the<sp/>minimum<sp/>value<sp/>seams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>std::max(col<sp/>-<sp/>1,<sp/>L_a);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>std::min(col<sp/>+<sp/>1,<sp/>L_b);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minpath,max;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>last_row<sp/>=<sp/>energy_map.operator()(Range(row<sp/>-<sp/>1,<sp/>row),<sp/>Range(left,<sp/>right));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMaxLoc(last_row,<sp/>&amp;minpath,<sp/>&amp;max);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energy_map.at&lt;uchar&gt;(row,<sp/>col)<sp/>=<sp/>energy_map.at&lt;uchar&gt;(row,<sp/>col)<sp/>+<sp/>(uchar)minpath;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>we<sp/>trace<sp/>the<sp/>optimal<sp/>seam<sp/>backwards<sp/>starting<sp/>at<sp/>the<sp/>top.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>arr;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_val;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_index[2];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>temp_last_row<sp/>=<sp/>energy_map.operator()(Range(n<sp/>-<sp/>2,<sp/>n<sp/>-<sp/>1),<sp/>Range(L_a,<sp/>L_b));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMaxIdx(temp_last_row,<sp/>&amp;min_val,<sp/>0,<sp/>min_index);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_index[1]<sp/>=<sp/>L_a<sp/>+<sp/>min_index[1]<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>index<sp/>of<sp/>the<sp/>minimum<sp/>point<sp/>is<sp/>(min_index[1],r).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//backtrack<sp/>through<sp/>the<sp/>energy<sp/>map<sp/>from<sp/>bottom<sp/>to<sp/>top:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>n-2;<sp/>r<sp/>&gt;=<sp/>1;<sp/>r--)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>std::max(min_index[1]<sp/>-<sp/>5,<sp/>L_a);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>std::min(min_index[1]<sp/>+<sp/>5,<sp/>L_b);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_last_row<sp/>=<sp/>energy_map.operator()(Range(r<sp/>-<sp/>1,<sp/>r),<sp/>Range(left,<sp/>right));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMaxIdx(temp_last_row,<sp/>&amp;min_val,0,min_index);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_index[1]<sp/>=<sp/>min_index[1]<sp/>+<sp/>L_a<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr.push_back(min_index[1]);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sep_seam_vector.push_back(arr);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sep_seam_vector;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//Description:<sp/>Text<sp/>Line<sp/>extraction<sp/>method<sp/>based<sp/>on<sp/>&quot;Separating<sp/>Seam<sp/>Carving&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//Return:<sp/>Extracted<sp/>text<sp/>lines<sp/>from<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//================================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_profile_seam_text_line_extractor_1a67017476e961c0531524d3f52cf70e23" kindref="member">ProfileSeamTextLineExtractor::extract</ref>(){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;int&gt;&gt;<sp/>sep_seams<sp/>=<sp/><ref refid="class_profile_seam_text_line_extractor_1a8221b34c948ac11481e2b8c8658ca4c6" kindref="member">computeSeperatingSeams</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;std::pair&lt;DImage,double&gt;&gt;<sp/>lines_vector;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>(int)sep_seams.size();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_elem,min,min_elem;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg=0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finding<sp/>the<sp/>min<sp/>and<sp/>max<sp/>points<sp/>on<sp/>each<sp/>pair<sp/>of<sp/>&quot;neighbouring&quot;<sp/>seams:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>l-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_projection_profile" kindref="compound">ProjectionProfile</ref><sp/>projector;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMaxLoc(sep_seams[i],&amp;min_elem);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMaxLoc(sep_seams[i<sp/>+<sp/>1],&amp;min,&amp;max_elem);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mat<sp/>line<sp/>=<sp/><ref refid="class_text_line_extractor_1acc518adbefc6a211ce84f5124da31709" kindref="member">_image</ref>.rowRange((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)min_elem,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)max_elem);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_image" kindref="compound">DImage</ref><sp/>*<sp/>profile<sp/>=<sp/><ref refid="class_d_image" kindref="compound">DImage</ref>(line).<ref refid="class_d_image_1a30853028d3eee069389660a20178e57c" kindref="member">project</ref>(projector);<sp/></highlight><highlight class="comment">//<sp/>finding<sp/>each<sp/>line&apos;s<sp/>projection<sp/>profle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projector.<ref refid="class_projection_profile_1a2f196aaeff36268a12033b0d35180c4d" kindref="member">smoothProfile</ref>(profile-&gt;<ref refid="class_d_image_1a1f875d1a50eff52cbd1ca119f5293c8d" kindref="member">getMat</ref>());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg<sp/>+=<sp/>projector.<ref refid="class_projection_profile_1a558047469b18ba1fa1ae3ffd98e3c491" kindref="member">getWeight</ref>(profile,0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines_vector.push_back(std::pair&lt;DImage,double&gt;(<ref refid="class_d_image" kindref="compound">DImage</ref>(line),<sp/>projector.<ref refid="class_projection_profile_1a558047469b18ba1fa1ae3ffd98e3c491" kindref="member">getWeight</ref>(profile,0)));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projector.<ref refid="class_projection_profile_1a8bb3b2db0312483fc39ea60cb0067612" kindref="member">drawProfile</ref>(&amp;<ref refid="class_d_image" kindref="compound">DImage</ref>(line),profile,500);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//namedWindow(&quot;line<sp/>number:<sp/>&quot;<sp/>+<sp/>std::to_string(i),<sp/>cv::WINDOW_NORMAL<sp/>|<sp/>CV_WINDOW_KEEPRATIO);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//imshow(&quot;line<sp/>number:<sp/>&quot;<sp/>+<sp/>std::to_string(i),<sp/>line);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>avg<sp/>=<sp/>avg<sp/>/<sp/>l;<sp/></highlight><highlight class="comment">//weight<sp/>avg;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Post<sp/>Processing:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)lines_vector.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines_vector[j].second<sp/>&lt;<sp/>avg)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines_vector.erase(lines_vector.begin()+j);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;k<sp/>&lt;<sp/>(int)lines_vector.size();<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namedWindow(</highlight><highlight class="stringliteral">&quot;line<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(k),<sp/>cv::WINDOW_NORMAL);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imshow(</highlight><highlight class="stringliteral">&quot;line<sp/>number:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(k),<sp/>lines_vector[k].first.getMat());<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/roykalony/Documents/workspace/manuscript-project/manuscriptvc/ManuscriptApp/ProfileSeamTextLineExtractor.cpp"/>
  </compounddef>
</doxygen>
