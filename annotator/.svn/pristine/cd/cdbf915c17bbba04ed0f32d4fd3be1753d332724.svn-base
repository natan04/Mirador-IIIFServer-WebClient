<%@ WebHandler Language="C#" Class="docElementsXml" %>

using System;
using System.Web;
using System.Linq;

using System.Collections.Generic;
using WebGTModel;
using System.Data.Objects;


public class docElementsXml : IHttpHandler, System.Web.SessionState.IReadOnlySessionState {

    public void ProcessRequest(HttpContext context)
    {
        int docID = Convert.ToInt32(context.Request["ID"]);
        string format = context.Request["format"];

        WebGTModel.User u = context.Session["user"] as WebGTModel.User;
        if (u == null)
        {
            //TODO: log image request with no user
            context.Response.Write("no user");
            return;
        }
        if (!Utils.CurrentUser.CanViewImage(docID))
        {
            //TODO: log image request with no permissions
            context.Response.Write("no permissions");
            return;
        }

        ManuscriptPage doc = Utils.Model.ManuscriptPages.SingleOrDefault(mp => mp.ID == docID);
        var docElements = doc.GetDocElements();
        var outObjects = from de in docElements
                         select new DocumentElement
                         {
                             ID = de.ID,
                             ParentID = de.ParentID,
                             ElementType = de.ElementType.ToString(),
                             X = de.X,
                             Y = de.Y,
                             Width = de.Width,
                             Height = de.Height,
                             Transcript = de.Transcript
                         };

        
        if (format == "csv")
        {
            context.Response.ContentType = "text/csv";
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            foreach (DocumentElement de in outObjects)
                sb.AppendLine(string.Format("{0},{1},{2},{3},{4},{5}", de.X, de.Y, de.Width,de.Height, de.ElementType,de.Transcript));
            context.Response.Write(sb.ToString());
            //context.Response.Cache.SetExpires(DateTime.Now.AddDays(1));
        }else
        {
            var outList = outObjects.ToList();
            System.Xml.Serialization.XmlSerializer ser = new System.Xml.Serialization.XmlSerializer(outList.GetType());
            context.Response.ContentType = "text/xml";
            ser.Serialize(context.Response.OutputStream, outList);
        } 

    }
    
    public bool IsReusable {
        get {
            return false;
        }
    }
    
    public class DocumentElement
    {
        public int ID;
        public int? ParentID;
        public string ElementType;
        public int? X;
        public int? Y;
        public int? Width;
        public int? Height;
        public string Transcript;
        
    }
}