var ManuscriptProperties;
var newProperty;
var peopertyDiv;
function ManuscriptDefaultProperties(collectionID, manuscriptID, msProperties) {
    this._msProperties = msProperties;
    this._collectionID = collectionID;
    this._manuscriptID = manuscriptID;
    this._ManuscriptProperties = 0;
    var _self = this;

    dialogHeight = msProperties.length * 100;

    peopertyDiv = newTag("div");
    ManuscriptProperties = newTag("div");
    ManuscriptProperties.text("Please set the following properties:");
    ManuscriptProperties.attr('title', 'Manuscript Properties');
    ManuscriptProperties.dialog({
        autoOpen: false,
        height: dialogHeight,
        width: 570,
        modal: true,
        buttons: {
            "Save Changes": function () { $(this).dialog("close"); },

            //TODO: make a dialog with autocomplete functionality - many possible properties
            "Add Property": function () {
                ajaxCall('docService', 'GetAllDocProperties',
                function (defPropResp) {
                    ManuscriptProperties.dialog("destroy");

                    DefaultMsProperties = defPropResp.d;

                    propertySelection = newTag("div");
                    propertySelection.attr("title", "Property Selection");
                    propertySelection.text("Choose property/proeprties to add:");

                    for (iter = 0; iter < DefaultMsProperties.length; iter = iter + 1) {
                        isContained = checkVsManuProperty(DefaultMsProperties[iter], msProperties)

                        if (isContained == false) {

                            var tmpDiv = newTag("div");
                            var inputTag = newTag("input");
                            inputTag.attr("type", "checkbox");
                            inputTag.attr("value", DefaultMsProperties[iter].PropertyID);
                            inputTag.css("margin-right", "10px");
                            inputTag.css("margin-top", "5px");
                            inputTag.attr("name", DefaultMsProperties[iter].PropertyName)
                            inputTag.appendTo(tmpDiv);
                            tmpDiv.append($("<label>" + DefaultMsProperties[iter].PropertyName + "<\label>").css("font-weight", "bold"));
                            tmpDiv
                                .click(function () {
                                    //var input = this.childNodes[0];
                                    //if (input.checked == true) {
                                    //    propertyID = input.value;
                                    //    ajaxCall('docService', 'addNewPropertyToMs', function () { }, ['msID', _self._manuscriptID, "propertyID", propertyID]);
                                    //} else if (input.checked == false) {
                                    //    alert("check was removed");
                                    // }
                                });
                            propertySelection.append(tmpDiv);
                        }

                        propertySelection.dialog({
                            autoOpen: true,
                            modal: true,
                            buttons: {
                                "Confirm": function () {
                                    var idArr = [];
                                    var idx = 0;
                                    // 0 is reserved for the sentence - please ...
                                    for (var f = 1; f <= this.childElementCount; f++) {
                                        var checkbox = this.childNodes[f].childNodes[0];
                                        var isChecked = checkbox.checked;
                                        if (isChecked == true) {
                                            idArr[idx] = checkbox.value;
                                            idx++;
                                        }
                                    }
                                    ajaxCall('docService', 'addNewPropertyToMs', function () { }, ['msID', _self._manuscriptID, "propertyIDs", idArr]);
                                    $(this).dialog("close");
                                },
                                //send selected property to server
                                "Cancel": function () { $(this).dialog("close"); }
                            }
                        });
                    }
                });
            },

            "Cancel": function () { $(this).dialog("close"); }
        }
    });

    for (iterator = 0; iterator < _self._msProperties.length; iterator = iterator + 1) {
                
        var inputTag = newTag("input");
        inputTag.attr("type", "text");
        inputTag.attr("value", _self._msProperties[iterator].Value);
        inputTag.css("margin-top", "10px");
        //inputTag.css("z-index", "100");

        peopertyDiv.append($("<label>" + _self._msProperties[iterator].Name + ":      </label>").css("margin-left", "0.5em"));
        peopertyDiv.append(inputTag);
        ManuscriptProperties.append(peopertyDiv);
    }

    this._ManuscriptProperties = ManuscriptProperties;
    ManuscriptProperties.dialog("open");


    this.checkVsManuProperty = function (DefaultProperty, msProperties) {
        for (var tr = 0; tr < msProperties.length; tr++) {
            isEqual = msProperties[tr].ID == DefaultProperty.PropertyID;
            if (isEqual == true) {
                return isEqual;
            }
        }
        return isEqual;
    }
}